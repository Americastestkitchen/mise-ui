$breakpoints: (
  sm: 480px,
  md: 768px,
  lg: 1024px,
  xl: 1200px,
);

$spacingUnit: 0.25rem; // 4px

$spacing: (
  xs: $spacingUnit,     // 0.25rem/4px
  sm: $spacingUnit * 2, // 0.5rem/8px
  md: $spacingUnit * 4, // 1rem/16px
  lg: $spacingUnit * 6, // 1.5rem/24px
  xl: $spacingUnit * 8, // 2rem/32px
  xxl: $spacingUnit * 10, // 2rem/40px
  xxxl: $spacingUnit * 12, // 2rem/48px
);

@function miseSpacing($size) {
  @return map-get($spacing, $size);
}

$contentLayout: (
  container: 1200px,
  containerGutter: (
    bpXs: miseSpacing(xs),
    bpSm: miseSpacing(xs),
    bpMd: miseSpacing(md), 
    bpLg: miseSpacing(xl),
    bpXl: miseSpacing(xl),
  ),
  column: (
    full: 100%,
    threeQuarters: 75%,
    twoThirds: 66.666%,
    half: 50%,
    third: 33.333%,
    quarter: 25%,
  ),
  columnGutter: (
    bpXs: miseSpacing(xs),
    bpSm: miseSpacing(xs),
    bpMd: miseSpacing(md), 
    bpLg: miseSpacing(md),
    bpXl: miseSpacing(md),
  )
);

@function miseContent($keys...) {
  $value: $fontFamilies;
  @each $key in $keys {
    $value: map-get($value, $key);
  }
  @return $value;
}

// Exports
// This allows variables to be used with ./src/components/tokens/layout/Layout.ts
:export {
  // Breakpoints
  @each $breakpoint, $value in $breakpoints {
    breakpoint-#{$breakpoint}: $value;
  }
  // Spacing Unit
  spacingUnit: $spacingUnit;
  // Spacing
  @each $spacingSize, $value in $spacing {
    spacing-#{$spacingSize}: $value;
  }
  // Content Layout
  @each $key, $value in $contentLayout {
    @if type-of($value) == map {
      @each $option, $value in $value {
        contentLayout-#{$key}-#{$option}: $value;
      }
    } @else {
      contentLayout-#{$key}: $value;
    }
  }
}
