@use "./spacing";

$contentContainer: (
  maxWidth: 75rem, // 1200px
  gutter: (
    base: spacing.spacing(x1),
    bpSm: spacing.spacing(x1),
    bpMd: spacing.spacing(x4), 
    bpLg: spacing.spacing(x8),
    bpXl: spacing.spacing(x8),
  ),
);

@function contentContainer($keys...) {
  $value: $contentContainer;
  @each $key in $keys {
    $value: map-get($value, $key);
  }
  @return $value;
}

@mixin contentContainer() {
  width: 100%;
  max-width: contentContainer(maxWidth);
  padding: 0 contentContainer(gutter base);
  @media only screen and (min-width: mise.breakpoint(sm)) {
    padding: 0 contentContainer(gutter bpXs);
  }
  @media only screen and (min-width: mise.breakpoint(md)) {
    padding: 0 contentContainer(gutter bpXs);
  }
  @media only screen and (min-width: mise.breakpoint(lg)) {
    padding: 0 contentContainer(gutter bpXs);
  }
  @media only screen and (min-width: mise.breakpoint(xl)) {
    padding: 0 contentContainer(gutter bpXs);
  }
}

// Exports
// This allows variables to be used with ./src/components/tokens/ContentContainer/ContentContainer.ts
:export {
  // Content Container
  @each $prop, $value in $contentContainer {
    @if type-of($value) == map {
      @each $option, $value in $value {
        contentContainer-#{$prop}-#{$option}: $value;
      }
    } @else {
      contentContainer-#{$prop}: $value;
    }
  }
}
