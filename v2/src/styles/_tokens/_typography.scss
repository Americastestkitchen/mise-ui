// Import web fonts from TypeKit
@import url("https://use.typekit.net/dol0wxv.css");

$fontFamilies: (
  merriweather: (
    family: #{Merriweather, serif},
    style: (
      normal: normal,
      italic: italic,
    ),
    weight: (
      normal: 400,
      bold: 700,
    ),
  ),
  proximaNova: (
    family: #{"Proxima Nova", sans-serif},
    style: (
      normal: normal,
      italic: italic,
    ),
    weight: (
      normal: 400,
      bold: 700,
    ),
  ),
  moret: (
    family: #{Moret, serif},
    style: (
      normal: normal,
    ),
    weight: (
      bold: 700,
    ),
  ),
);

@function fontFamily($keys...) {
  $value: $fontFamilies;
  @each $key in $keys {
    $value: map-get($value, $key);
  }
  @return $value;
}

$resetTypography: (
  family: fontFamily(merriweather, family),
  size: 16px,
  lineHeight: 1.625,
  weight: fontFamily(merriweather, weight, normal),
);

@function resetTypography($prop) {
  @return map-get($resetTypography, $prop);
}

@mixin resetTypography {
  font-family: resetTypography(family);
  font-size: resetTypography(size);
  line-height: resetTypography(lineHeight);
  weight: resetTypography(weight);
}

$typography: (
  text: (
    primary: (
      family: fontFamily(merriweather, family),
      lineHeight: 1.625,
      size: (
        sm: 0.875rem,
        md: 1rem,
        lg: 1.125rem,
        xl: 1.5rem,
      ),
      style: (
        normal: normal,
        italic: italic,
      ),
      weight: (
        normal: 400,
        bold: 700,
      ),
    ),
    secondary: (
      family: fontFamily(proximaNova, family),
      lineHeight: 1.625,
      size: (
        sm: 0.875rem,
        md: 1rem,
        lg: 1.125rem,
        xl: 1.5rem,
      ),
      style: (
        normal: normal,
        italic: italic,
        caps: caps,
      ),
      weight: (
        normal: 400,
        bold: 700,
      ),
    ),
  ),
  display: (
    primary: (
      family: fontFamily(moret, family),
      lineHeight: 1.125,
      size: (
        sm: 2rem,
        md: 2.25rem,
        lg: 3rem,
      ),
      style: (
        normal: normal,
      ),
      weight: (
        bold: 700,
      ),
    ),
  ),
);

@function typography($keys...) {
  $value: $typography;
  @each $key in $keys {
    $value: map-get($value, $key);
  }
  @return $value;
}

@mixin font($category, $name, $size: md, $weight: normal, $style: normal) {
  font-family: typography($category, $name, family);
  font-size: typography($category, $name, size, $size);
  line-height: typography($category, $name, lineHeight);
  weight: typography($category, $name, weight, $weight);
  @if $style == italic and typography($category, $name, style, italic) {
    font-style: italic;
  }
  @if $style == caps and typography($category, $name, style, caps) {
    letter-spacing: calc(1em * 0.0625);
    text-transform: uppercase;
  }
}

// Exports
// This allows variables to be used with ./src/components/tokens/typography/Typography.ts
:export {
  // Font Family
  @each $name, $value in $fontFamilies {
    @each $prop, $value in $value {
      @if type-of($value) == map {
        @each $option, $value in $value {
          fontFamilies-#{$name}-#{$prop}-#{$option}: $value;
        }
      } @else {
        fontFamilies-#{$name}-#{$prop}: $value;
      }
    }
  }
  // Reset Typography
  @each $prop, $value in $resetTypography {
    resetTypography-#{$prop}: $value;
  }
  // Mise Typography
  @each $category, $value in $typography {
    @each $name, $value in $value {
      @each $prop, $value in $value {
        @if type-of($value) == map {
          @each $option, $value in $value {
            typography-#{$category}-#{$name}-#{$prop}-#{$option}: $value;
          }
        } @else {
          typography-#{$category}-#{$name}-#{$prop}: $value;
        }
      }
    }
  }
}
